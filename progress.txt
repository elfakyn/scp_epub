Punchlist:
* implement linter this is getting ridiculous

==============================================

TASKS:

1. download all pages
* Rewrite downloader to not be a complete janky mess.
	[DONE] * Multiple backends for caching:
		[DEFERRED] * aws
		[DONE] * local
		[DONE] * able to select between them
	[DONE] * Multiple backends for retrieving the api secret:
		[DEFERRED] * aws
		[DONE] * local
		[DONE] * able to select between them
	[DONE] * Single instance of wikidot client
	* Downloads:
		* Download list
		* Download page via API
		* Download page via web
	* Get entire wiki:
		* Download list then filter pages based on definition, then download only those pages
		* Apply edge cases as needed based on the definition file.

[DONE] 2. PRETTIFY SINGLE PAGE
[CANCELLED] * delete the div that aligns right and is at the very beginning of every page ( should we do this? what if there's a page that doesn't have that div but has another one instead with actual content)
[DONE] * WHAT PYSCP DOES (MAKE COMPATIBLE):
	[DONE] * remove widget box
	[DONE] * yui-navset
	[DONE] * collapsible-block
	[DONE] * footnoteref, footnote footer: BREAK COMPATIBILITY WITH PYSCP, MAKE NICE FOR EPUB
	[DONE] * blockquote
	[DONE] * links
	[DONE] * images
	[DONE] * title
[DONE] * Put them all together to parse a whole page
	[DONE] * Component test that correctly parses whole web html files
	[DONE] * I want some sort of test that the output of the combined parsers makes sense. Even if just a regression test.
[DONE] * Process all pages
	[DONE] * Error handling: e.g. each item in its own try-catch with logging of errors
		[DONE] * Log errors verbosely, exactly what failed and how
	[DONE] * Platform test: parse LITERALLY ALL THE SCP PAGES and test that none fail, or <N fail.

3. CREATE BOOK
[DONE] * Book definition for complete collection
* Dynamically generate pages:
	* Section Titles
	* Index and credits generator
* TOC generator: creates a TOC & spine (page order) from a list of pages & a book definition
	* If page has a valid parent (parent which is in page list):
		* Exclude it from normal TOC building and put it immediately after parent page
		* Add parent key to builder json
	* Pages are consumed when first included and appear only once
	* Discard all pages that don't make it in the spine
* Add metadata:
	* Ebook metadata
	* CSS
	* Cover image
		* Contact SunnyClockwork or make own artwork
* Write book file

4. Put everything together into one command
* Run arbitrary definition or all definitions
* Flag to refresh list, flag to redownload pages
* Summary of run: pages processed / number of pages in book / number of pages discarded / number of pages that failed processing

5. Fully automated end to end builder:
* AWS portion of code:
	* store/retrieve from s3
	* AWSSM api key
	* SNS alerting on summary of run
* Lambda that uploads to MEGA
* Terraform infrastructure:
	* main program, containerized monthly runs
	* s3 event notification to trigger upload to MEGA
* Supporting infrastructure:
	* Remote state
	* RBAC on AWS account, better do it now rather than later when there's actually users and stuff in there.
	* Alerting infrastructure

5. Complete documentation on code and project

==============================================

TOC GENERATOR:
* always do natural sort, there's no reason to use anything else
* default sort: "name" ASC natural sort
* natural title sort: "title" ASC natural sort

INDICES AND CREDITS GENERATOR:
* Title (with internal link)
* Author
* Created at
* Link to website entry (explicit: scp-wiki.net/blablabla)

===================
Long-term:
* add support for images
* more book definitions
